================================================================================================================================================================================
mod 01

# Composer é um gerenciador de dependências PHP.
# Ele guarda as dependências dentro do projeto.
# Se quisermos uma dependência global, devemos usar o global command.
# Um pacote sempre segue a nomenclatura: <vendor>/<name>.
# As meta-informações de uma dependência ficam salvas no arquivo composer.json.
# O comando composer init inicializa o composer.json.

-------------------------------------------------------------------------------------------------------------------------------------------
## instalando o composer no mac e linux com os comandos especificados na pagina oficial.
## após a instalação para verificar a versão, comando: composer --version
## composer é um gerênciador de dependências, que precisar ser instalado na maquina.porém o gerenciamento é por projeto. iniciando dentro da pasta raiz do projeto. 
## para iniciar o composer no projeto pode ser criado um arquivo no formato composer.json na pasta raiz do projeto. ou iniciar com o comando composer init também dentro da pasta raiz do projeto.

* Após isso, iniciado boas vindas ao gerador de configurações do Composer, que nos pedirá o nome de um pacote. Os nomes dos pacotes do Composer normalmente são 
    dados da forma <vendor>/<name>, onde vendor é quem está distribuindo  esse pacote (como um nickname, um nome de usuário do github ou o nome da empresa) e name é o nome do pacote que está sendo criado.
    exemplo: loureirobruno/buscador-cursos
* será solicitado a informar o Package (autor/empresa)
* será solicitação a informar a Description (descrição do pacote)
* será solicitado a informar Minimum Stability (em que fase esta o pacote)
* será solicitado a informar Package Type ( o tipo de pacote)
* será solicitado a informar Licence
* será solicitado a informar dependências
* ... git ignore, src
-------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
mod 02

# O composer possui um repositório central de pacotes: https://packagist.org/
# É possível configurar repositórios de outras fontes (do github, zip etc)
# O pacotes guzzlehttp/guzzle serve para executar requisições HTTP de alto nível
# Para instalar uma dependência (pacote) basta executar: composer require <nome do pacote>
# Composer guarda as dependências e dependências transitivas na pasta vendor do projeto
# O nome e versão da dependências fica salvo no arquivo composer.json
# O comando require adiciona automaticamente a dependência no composer.json
# O comando composer install automaticamente baixa todas as dependências do composer.lock (ou do composer.json, caso o .lock não exista ainda)
# O arquivo composer.lock define todas as versões exatas instaladas
# O composer já gera um arquivo autoload.php para facilitar o carregamento das dependências
# Basta usar require vendor/autoload.php

-------------------------------------------------------------------------------------------------------------------------------------------
## o composer como seu repositorio principal do pacotes o https://packagist.org/.
## são os pacotes públicos instalavés com o composer.
## com o uso do comando composer install instala todas as dependências contidas no arquivo json
## com o uso do comando composer update, atualiza todas as dependências contidas no arquivo json
-------------------------------------------------------------------------------------------------------------------------------------------

mod 03

# Conhecemos a PSR-4 (Autoloader)
# A PSR-4 define um padrão  para o carregamento automático de classes
# O namespace da classe tem partes:
# O vendor namespace (ou namespace padrão ou namespace prefixo)
# O vendor namespace fica mapeado para uma pasta do projeto dentro do arquivo composer.json
# Podemos ter um sub-namespace que precisa ser representado através de pastas
# Para atualizar o arquivo autoload.php baseado no composer.json, podemos rodar o comando composer dumpautoload
# Para classes que não seguem o PSR-4, podemos definir um classmap dentro do composer.json
# Para carregar um biblioteca de funções automaticamente, podemos adicionar uma entrada files no composer.json

-------------------------------------------------------------------------------------------------------------------------------------------
## fazer que o composer trabalhe a importação de classes do tipo "models" para classe do tipo "views" de forma automatica 
inserindo a extensão do autoload dentro a arquivo composer.json.

"autoload" : {
    "psr-4" : {
        "LoureiroBruno\\BuscadorDeCursos\\": "src/"
    }
}

Assim, todas as classes que começarem com o namespace LoureiroBruno\\BuscadorDeCursos\\ serão buscadas na pasta "src/" do nosso projeto. 
Logo, se tentássemos encontrar uma classe LoureiroBruno\BuscadorDeCursos\Service\ClasseTeste, esse arquivo estaria dentro de "src/Service/ClasseTeste.php".
require_once "src/Service/ClasseTeste.php". importanto na classe chamada.

e para que a logica funcione, 
1 mesmo nome registrado no composer.json autload{} igual ao namespace da classe
2 a classe deve estar contida no diretorio (src)
3 o nome do arquivo de ter o mesmo nome da classe
-------------------------------------------------------------------------------------------------------------------------------------------

