================================================================================================================================================================================
mod 01

# Composer é um gerenciador de dependências PHP.
# Ele guarda as dependências dentro do projeto.
# Se quisermos uma dependência global, devemos usar o global command.
# Um pacote sempre segue a nomenclatura: <vendor>/<name>.
# As meta-informações de uma dependência ficam salvas no arquivo composer.json.
# O comando composer init inicializa o composer.json.

-------------------------------------------------------------------------------------------------------------------------------------------
## instalando o composer no mac e linux com os comandos especificados na pagina oficial.
## após a instalação para verificar a versão, comando: composer --version
## composer é um gerênciador de dependências, que precisar ser instalado na maquina.porém o gerenciamento é por projeto. iniciando dentro da pasta raiz do projeto. 
## para iniciar o composer no projeto pode ser criado um arquivo no formato composer.json na pasta raiz do projeto. ou iniciar com o comando composer init também dentro da pasta raiz do projeto.

* Após isso, iniciado boas vindas ao gerador de configurações do Composer, que nos pedirá o nome de um pacote. Os nomes dos pacotes do Composer normalmente são 
    dados da forma <vendor>/<name>, onde vendor é quem está distribuindo  esse pacote (como um nickname, um nome de usuário do github ou o nome da empresa) e name é o nome do pacote que está sendo criado.
    exemplo: loureirobruno/buscador-cursos
* será solicitado a informar o Package (autor/empresa)
* será solicitação a informar a Description (descrição do pacote)
* será solicitado a informar Minimum Stability (em que fase esta o pacote)
* será solicitado a informar Package Type ( o tipo de pacote)
* será solicitado a informar Licence
* será solicitado a informar dependências
* ... git ignore, src
-------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
mod 02

# O composer possui um repositório central de pacotes: https://packagist.org/
# É possível configurar repositórios de outras fontes (do github, zip etc)
# O pacotes guzzlehttp/guzzle serve para executar requisições HTTP de alto nível
# Para instalar uma dependência (pacote) basta executar: composer require <nome do pacote>
# Composer guarda as dependências e dependências transitivas na pasta vendor do projeto
# O nome e versão da dependências fica salvo no arquivo composer.json
# O comando require adiciona automaticamente a dependência no composer.json
# O comando composer install automaticamente baixa todas as dependências do composer.lock (ou do composer.json, caso o .lock não exista ainda)
# O arquivo composer.lock define todas as versões exatas instaladas
# O composer já gera um arquivo autoload.php para facilitar o carregamento das dependências
# Basta usar require vendor/autoload.php

-------------------------------------------------------------------------------------------------------------------------------------------
## o composer como seu repositorio principal do pacotes o https://packagist.org/.
## são os pacotes públicos instalavés com o composer.
## com o uso do comando composer install instala todas as dependências contidas no arquivo json
## com o uso do comando composer update, atualiza todas as dependências contidas no arquivo json
-------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
mod 03

# Conhecemos a PSR-4 (Autoloader)
# A PSR-4 define um padrão  para o carregamento automático de classes
# O namespace da classe tem partes:
# O vendor namespace (ou namespace padrão ou namespace prefixo)
# O vendor namespace fica mapeado para uma pasta do projeto dentro do arquivo composer.json
# Podemos ter um sub-namespace que precisa ser representado através de pastas
# Para atualizar o arquivo autoload.php baseado no composer.json, podemos rodar o comando composer dumpautoload
# Para classes que não seguem o PSR-4, podemos definir um classmap dentro do composer.json
# Para carregar um biblioteca de funções automaticamente, podemos adicionar uma entrada files no composer.json

-------------------------------------------------------------------------------------------------------------------------------------------
## fazer que o composer trabalhe a importação de classes do tipo "models" para classe do tipo "views" de forma automatica 
inserindo a extensão do autoload dentro a arquivo composer.json.

"autoload" : {
    "psr-4" : {
        "LoureiroBruno\\BuscadorDeCursos\\": "src/"
    }
}

Assim, todas as classes que começarem com o namespace LoureiroBruno\\BuscadorDeCursos\\ serão buscadas na pasta "src/" do nosso projeto. 
Logo, se tentássemos encontrar uma classe LoureiroBruno\BuscadorDeCursos\Service\ClasseTeste, esse arquivo estaria dentro de "src/Service/ClasseTeste.php".
require_once "src/Service/ClasseTeste.php". importanto na classe chamada.

e para que a logica funcione, 
1 mesmo nome registrado no composer.json autload{} igual ao namespace da classe
2 a classe deve estar contida no diretorio (src)
3 o nome do arquivo de ter o mesmo nome da classe
4 e conter o namespace registrado

## OBSERVAÇÃO - para relançar as dependências do autoload comando : composer dump-autoload

## ao ultilizar projetos legados onde o código que não foi implementado o padrão da psr4, pode aplicar no composer class map mapeamento de classes
e para que a logica funcione, 
1 que não possue o namespace
2 localize o diretorio do arquivo atual
3 padrao formato de pascal case para melhor identificação

 "classmap": [
            "./ClasseLegada.php"
        ],

* usos de mais de uma classe e uso de outro diretorio da classe

"classmap": [
            "./src/ClasseLegada.php",
            "./ClasseLegada_.php"
        ],

## ao ultilizar projetos legados onde o código que não foi implementado o padrão da psr4, pode aplicar no composer mapaemnto de arquivo de funções. 

* sempre será incluido atraves do uso do require_once do vendor/autoload do composer, porém fica a critério de chamar ou não. 
pode criatr uma função com varias funções dentro dela. ou ter inserido varias funções unicas.

"autoload": {
        "files": [
            "./funcoes.php"
        ],
        "classmap": [
            "./src/ClasseLegada.php",
            "./ClasseLegada_.php"
        ],
        "psr-4": {
            "LoureiroBruno\\BuscadorDeCursos\\": "src/"
        }
    },

-------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
mod 04

# Através do flag --dev definimos que uma dependência não faz parte do ambiente de produção
# Caso desejarmos baixar as dependências de "produção" apenas podemos usar o flag no-dev
# Arquivos executáveis fornecidos por componentes instalados pelo composer ficam na pasta vendor/bin
# Conhecemos três ferramentas do mundo PHP:
* phpunit para rodar testes;
* phpcs para verificar padrões de código;
* phan para executar uma análise estática da sintaxe do nosso código.

-------------------------------------------------------------------------------------------------------------------------------------------
## instalar pacotes, componentes ou outro tipos de ferramentas, que seja instalados apenas no ambiente de desenvilvimento.
como por exemplo o php unit. ao baixar com o composer, usando no commando: composer require --dev phpunit/phpunit ^8.
será criado dentro da arvore

"require-dev": {
        "phpunit/phpunit": "^8"
    }

require-dev representa que, uma vez executado composer install acrescido --no-dev , ficando composer install --no-dev.
será instalado todas as dependências com a exceção das dependências contidas no require-dev

## ./vendor/bin/phpunit --version => verificar a versão instalada no projeto
## Onde ficam os arquivos executáveis que o Composer traz com os pacotes - Na pasta bin dentro da pasta vendor
## modo de uso de mais algunas ferramentas que ajudam no desenvolviento php_codesniffer, embora tenha opção de instalar no composer
o editor de vs code pois extensões do tipo php_codesniffer, que fazem a mesma tarfefa de forma mais pratica numa verificação automatica
sobre a formatação da indentação do código de accordo com a psr atualizada (PHP Intelephense).
## exite outra ferramenta phan php que analisa se algum variavel é inexistente disponivel com o composer. o editor de vs code também
disponibiliza o extnsão da ferramenta php phan anlise. Com o uso do debbug informa os erros das variaveis incorretas.
-------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
mod 05

# scripts são definidos dentro do composer.json;
# scripts podem definir comandos que chamam ferramentas instaladas pelo Composer;
# scripts podem chamar comandos do sistema operacional;
# scripts podem chamar códigos PHP;
# scripts podem ser associados ao evento.

-------------------------------------------------------------------------------------------------------------------------------------------
## com o uso dos scripts dentro do arquivo composer json, poderá fazer verificações do código de mameira de facilizar os demais processos 
de testes do código. executando scripts das ferramentas citadas acima, mesmo q a ide faça a correção duarante a codificação como por exemplo.
exemplo:

"scripts": {
    "test": "phpunit tests\\TestBuscadorDeCursos",
    "cs": "phpcs --standard=PSR12 src/"
}

está sendo executando via comando como o apelido de test a verificação de teste unitado no arquivo TestBuscadorDeCursos dentro da pasta tests
de forma que execute o comando: "composer test" á mesma forma com o comando "composer cs" para verificar se o arquivo está dentro do padrão psr-12

## agora ao invés de executar dentro a pasta raiz do projeto os coamdos um por um do tipo, "test", "cs" etc.
poderá criar um unico script que excutará de forma automatica todos dentro da lista do composer json
com o uso do pipeline de deploy
-- Possibilidade de configurarmos um processo de build com um único comando

"scripts": {
    "test": "phpunit tests\\TestBuscadorDeCursos.php",
    "cs": "phpcs --standard=PSR12 src/",
    "phan": "phan --allow-polyfill-parser",
    "check": [
        "@phan",
        "@cs",
        "@test"
    ]
}

é fazer referência aos scrips já existentes. Para isso, basta adicionarmos um @ na frente de cada script na lista:

## ao pegarmos um projeto já existente do Composer, podemos rodar composer list
## descrições personalizadas para nossos scripts.

"scripts-descriptions": {
    "check": "Roda as verificações do código. PHAN, PHPCS e PHPUNIT"
}

incluido na descrição na lista, no tipo check com a descrição citada a cima.

## qualquer comando do sistema operacional pode ser executado por meio dos scripts

"scripts": {
    "test": "phpunit tests\\TestBuscadorDeCursos.php",
    "cs": "phpcs --standard=PSR12 src/",
    "phan": "phan --allow-polyfill-parser",
    "ls": "dir",
    "check": [
        "@phan",
        "@cs",
        "@test"
    ]
},

ao executar "compose ls" será executado "dir" comando listar diretorios no ambinte do windows
-------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================
mod 06

# 

-------------------------------------------------------------------------------------------------------------------------------------------
## 
-------------------------------------------------------------------------------------------------------------------------------------------

================================================================================================================================================================================